import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

/* Tests pretty stdout */
// TODO: https://github.com/radarsh/gradle-test-logger-plugin
//plugins {
//    id 'com.adarshr.test-logger' version '2.0.0'
//}

// add a collection to track failedTests
ext.failedTests = []

// add a testlistener to all tasks of type Test
tasks.withType(Test) {
    afterTest { TestDescriptor descriptor, TestResult result ->
        //noinspection UnnecessaryQualifiedReference
        if (result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
            failedTests << "â€¢ ${descriptor.className}::${descriptor.name}"
        }
    }
}

// print out tracked failed tests when the build has finished
gradle.buildFinished {
    if (!failedTests.empty) {
        println "\nFailed tests for ${project.name}:"
        failedTests.each { failedTest ->
            println failedTest as String
        }
        println ""
    }
}

// set up stdout format for tests
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
